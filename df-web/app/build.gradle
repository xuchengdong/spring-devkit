buildscript {
    ext {
        springBootVersion = '1.5.4.RELEASE'
    }
    repositories {
        // NOTE: You should declare only repositories that you need here
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
    }
}

// https://plugins.gradle.org/plugin/com.gorylenko.gradle-git-properties
plugins {
    id "com.gorylenko.gradle-git-properties" version "1.4.17"
}

configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
}

group 'com.df'
version '1.0-SNAPSHOT'

apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8

repositories {
    // NOTE: You should declare only repositories that you need here
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/release" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/snapshot" }
    maven { url 'http://nexus.qbao.com/repository/maven-snapshots/' }
}

configurations {
    all*.exclude group: 'org.springframework.boot',
            module: 'spring-boot-starter-logging'
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0')
//    compile('com.alibaba:druid-spring-boot-starter:1.1.1')
    compile('com.alibaba:druid:1.1.1')
    compile('com.df:multipleds-spring-boot-starter:1.0-SNAPSHOT')
    runtime('mysql:mysql-connector-java')

    compile("org.springframework.boot:spring-boot-starter-log4j2")
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-cache')
    compile('org.springframework.boot:spring-boot-starter-data-redis')
//    compile('redis.clients:jedis')
//    compile ('org.springframework.data:spring-data-redis')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('com.df:cassecurity-spring-boot-starter:1.0-SNAPSHOT')
//    compile('org.springframework.security:spring-security-cas')
//    compile('org.jasig.cas.client:cas-client-core:3.4.1')

    compile('org.springframework.boot:spring-boot-starter-activemq')
    compile('org.apache.activemq:activemq-pool')

    compile('org.springframework.boot:spring-boot-starter-amqp')

    compile('org.springframework.boot:spring-boot-starter-mail')

    compile("org.springframework.boot:spring-boot-devtools")

//    optional("org.springframework.boot:spring-boot-configuration-processor")
//    testCompile group: 'junit', name: 'junit', version: '4.12'

//    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    runtime("org.springframework.boot:spring-boot-starter-tomcat")

    testCompile('org.springframework.boot:spring-boot-starter-test')

    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-hateoas")
    compile("org.springframework.boot:spring-boot-actuator-docs")
    compile("org.jolokia:jolokia-core")
//    compile("org.webjars:hal-browser")
    compile("org.springframework.data:spring-data-rest-hal-browser")
}

//compileJava.dependsOn(processResources)